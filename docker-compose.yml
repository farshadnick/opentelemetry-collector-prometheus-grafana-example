version: '3.8'

services:
  # Flask Application
  app:
    build: .
    ports:
      - "5000:5000"
    depends_on:
      - otel-collector
      - redis
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - SENTRY_DSN=http://5a9b85bb26024e7ea7f60e10f5d0d29f@sentry:9000/1
    networks:
      - monitoring

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics exporter
      - "13133:13133" # Health check
    depends_on:
      - prometheus
      - loki
      - sentry
    networks:
      - monitoring

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring

  # Grafana Loki
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
      - loki-data:/loki
    networks:
      - monitoring

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
      - loki
    networks:
      - monitoring

  # Redis (for Sentry)
  redis:
    image: redis:7-alpine
    volumes:
      - redis-data:/data
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # PostgreSQL (for Sentry)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: sentry
      POSTGRES_PASSWORD: sentry
      POSTGRES_DB: sentry
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sentry"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Sentry
  sentry:
    image: sentry:latest
    depends_on:
      - redis
      - postgres
    environment:
      SENTRY_SECRET_KEY: 'your-secret-key-change-this-in-production'
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
      SENTRY_REDIS_HOST: redis
    ports:
      - "9000:9000"
    volumes:
      - sentry-data:/var/lib/sentry/files
    networks:
      - monitoring

  # Sentry Cron
  sentry-cron:
    image: sentry:latest
    depends_on:
      - redis
      - postgres
    command: run cron
    environment:
      SENTRY_SECRET_KEY: 'your-secret-key-change-this-in-production'
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
      SENTRY_REDIS_HOST: redis
    networks:
      - monitoring

  # Sentry Worker
  sentry-worker:
    image: sentry:latest
    depends_on:
      - redis
      - postgres
    command: run worker
    environment:
      SENTRY_SECRET_KEY: 'your-secret-key-change-this-in-production'
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
      SENTRY_REDIS_HOST: redis
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data:
  loki-data:
  redis-data:
  postgres-data:
  sentry-data:

